
PROCEDURE dot_product( VAR dot : INTEGER v1,v2 : ARRAY_OF INTEGER)
VAR
    i : INTEGER
BEGIN
    dot := 0 ;
    i := 0
    IF (v1.length <> v2.length  ) THEN
        write ("victors are different sized")
        dot = NAN ;
    END_IF
    WHILE (i < v1.length) DO
        dot := dot + v1[i]*v2[i]
        i++
    END_WHILE
END



ALGORITHM vectors
VAR 
    dot : INTEGER
    v1,v2 : ARRAY_OF INTEGER
    
BEGIN
    n1 := read_size()
    read_array(n1,v1)

    n2 :=read_size()
    read_array(n2,v2)
    dot_product(v1,v2,dot);
    IF (dot =0)  THEN
        write( "orthogonal")
    ELSE
    write("not orthogonal")
END

FUNCTION dot_product(v1,v2:ARRAY_OF INTEGER) : INTEGER
VAR
    i, dot : INTEGER
BEGIN
    i:= 0;
    dot := 0;
    IF (v1.length <> v2.length) THEN
        Write("victors are different sized");
        RETURN  NAN;
    END_IF
    FOR i FROM 0 TO v1.length-1 STEP 1  DO
        dot:= dot + v1[i]*v2[i];
    END_FOR
    RETURN dot ;
END

ALGORITHM orth_vectors
VAR
    v1,v2 :ARRAY_OF INTEGER;
    dot : INTEGER
BEGIN
    
    n1:=read_size();
    read_array(n1,v1)
    
    n2 := read_size();
    read_array(n2,v2)

    dot:= dot_product(v1,v2);
    IF (dot =0) THEN
        write("orthogonal")
    ELSE
    write("not orthogonal")
    END_IF
END